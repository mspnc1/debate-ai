// Auto-generated by scripts/demo/build-recordings-manifest.js
// Do not edit directly.
import type { DemoChat, DemoCompare, DemoDebate } from '@/types/demo';
import recording_chat_c_itinerary_v1 from './recordings/chat_c_itinerary_v1.json';
import recording_chat_c_refactor_v1 from './recordings/chat_c_refactor_v1.json';
import recording_chat_cg_itinerary_v1 from './recordings/chat_cg_itinerary_v1.json';
import recording_chat_cg_refactor_v1 from './recordings/chat_cg_refactor_v1.json';
import recording_chat_co_itinerary_v1 from './recordings/chat_co_itinerary_v1.json';
import recording_chat_co_refactor_v1 from './recordings/chat_co_refactor_v1.json';
import recording_chat_cog_itinerary_v1 from './recordings/chat_cog_itinerary_v1.json';
import recording_chat_cog_refactor_v1 from './recordings/chat_cog_refactor_v1.json';
import recording_chat_g_itinerary_v1 from './recordings/chat_g_itinerary_v1.json';
import recording_chat_g_refactor_v1 from './recordings/chat_g_refactor_v1.json';
import recording_chat_o_itinerary_v1 from './recordings/chat_o_itinerary_v1.json';
import recording_chat_o_refactor_v1 from './recordings/chat_o_refactor_v1.json';
import recording_chat_og_itinerary_v1 from './recordings/chat_og_itinerary_v1.json';
import recording_chat_og_refactor_v1 from './recordings/chat_og_refactor_v1.json';
import recording_compare_cg_itinerary_v1 from './recordings/compare_cg_itinerary_v1.json';
import recording_compare_cg_sql_v1 from './recordings/compare_cg_sql_v1.json';
import recording_compare_co_itinerary_v1 from './recordings/compare_co_itinerary_v1.json';
import recording_compare_co_sql_v1 from './recordings/compare_co_sql_v1.json';
import recording_compare_og_itinerary_v1 from './recordings/compare_og_itinerary_v1.json';
import recording_compare_og_sql_v1 from './recordings/compare_og_sql_v1.json';
import recording_debate_cg_default_1 from './recordings/debate_cg_default_1.json';
import recording_debate_cg_george_1 from './recordings/debate_cg_george_1.json';
import recording_debate_cg_sage_1 from './recordings/debate_cg_sage_1.json';
import recording_debate_co_default_1 from './recordings/debate_co_default_1.json';
import recording_debate_co_george_1 from './recordings/debate_co_george_1.json';
import recording_debate_co_sage_1 from './recordings/debate_co_sage_1.json';
import recording_debate_og_default_1 from './recordings/debate_og_default_1.json';
import recording_debate_og_george_1 from './recordings/debate_og_george_1.json';
import recording_debate_og_sage_1 from './recordings/debate_og_sage_1.json';

export type DemoRecordingType = 'chat' | 'compare' | 'debate';

export interface DemoRecordingEntry<T = DemoChat | DemoCompare | DemoDebate> {
  id: string;
  type: DemoRecordingType;
  providers: string[];
  title?: string | null;
  topic?: string | null;
  data: T;
}

export const demoRecordings: DemoRecordingEntry[] = [
  {
    id: 'chat_c_itinerary_v1',
    type: 'chat',
    providers: ['claude'],
    title: "Boston itinerary (Claude)",
    data: recording_chat_c_itinerary_v1 as unknown as (DemoChat),
  },
  {
    id: 'chat_c_refactor_v1',
    type: 'chat',
    providers: ['claude'],
    title: "Refactor ChatInput (Claude)",
    data: recording_chat_c_refactor_v1 as unknown as (DemoChat),
  },
  {
    id: 'chat_cg_itinerary_v1',
    type: 'chat',
    providers: ['claude', 'google'],
    title: "NYC itinerary (Claude+Gemini)",
    data: recording_chat_cg_itinerary_v1 as unknown as (DemoChat),
  },
  {
    id: 'chat_cg_refactor_v1',
    type: 'chat',
    providers: ['claude', 'google'],
    title: "Improve LiveTranscript (Claude + Gemini)",
    data: recording_chat_cg_refactor_v1 as unknown as (DemoChat),
  },
  {
    id: 'chat_co_itinerary_v1',
    type: 'chat',
    providers: ['claude', 'openai'],
    title: "Kyoto itinerary (Claude+OpenAI)",
    data: recording_chat_co_itinerary_v1 as unknown as (DemoChat),
  },
  {
    id: 'chat_co_refactor_v1',
    type: 'chat',
    providers: ['claude', 'openai'],
    title: "Code review: VoiceRecorder (Claude + ChatGPT)",
    data: recording_chat_co_refactor_v1 as unknown as (DemoChat),
  },
  {
    id: 'chat_cog_itinerary_v1',
    type: 'chat',
    providers: ['claude', 'openai', 'google'],
    title: "San Francisco itinerary (Claude+OpenAI+Gemini)",
    data: recording_chat_cog_itinerary_v1 as unknown as (DemoChat),
  },
  {
    id: 'chat_cog_refactor_v1',
    type: 'chat',
    providers: ['claude', 'openai', 'google'],
    title: "Collaborative refactor: PromptComposer (All AIs)",
    data: recording_chat_cog_refactor_v1 as unknown as (DemoChat),
  },
  {
    id: 'chat_g_itinerary_v1',
    type: 'chat',
    providers: ['google'],
    title: "Boston itinerary (Gemini)",
    data: recording_chat_g_itinerary_v1 as unknown as (DemoChat),
  },
  {
    id: 'chat_g_refactor_v1',
    type: 'chat',
    providers: ['google'],
    title: "Optimize FeedList (Gemini)",
    data: recording_chat_g_refactor_v1 as unknown as (DemoChat),
  },
  {
    id: 'chat_o_itinerary_v1',
    type: 'chat',
    providers: ['openai'],
    title: "Boston itinerary (OpenAI)",
    data: recording_chat_o_itinerary_v1 as unknown as (DemoChat),
  },
  {
    id: 'chat_o_refactor_v1',
    type: 'chat',
    providers: ['openai'],
    title: "Add skeleton + tests (OpenAI)",
    data: recording_chat_o_refactor_v1 as unknown as (DemoChat),
  },
  {
    id: 'chat_og_itinerary_v1',
    type: 'chat',
    providers: ['openai', 'google'],
    title: "Austin itinerary (OpenAI+Gemini)",
    data: recording_chat_og_itinerary_v1 as unknown as (DemoChat),
  },
  {
    id: 'chat_og_refactor_v1',
    type: 'chat',
    providers: ['openai', 'google'],
    title: "Redesign PersonaSheet (ChatGPT + Gemini)",
    data: recording_chat_og_refactor_v1 as unknown as (DemoChat),
  },
  {
    id: 'compare_cg_itinerary_v1',
    type: 'compare',
    providers: ['claude', 'google'],
    title: "Road Trip to NYC",
    data: recording_compare_cg_itinerary_v1 as unknown as (DemoCompare),
  },
  {
    id: 'compare_cg_sql_v1',
    type: 'compare',
    providers: ['claude', 'google'],
    title: "Explain SQL CTE (Claude vs Gemini)",
    data: recording_compare_cg_sql_v1 as unknown as (DemoCompare),
  },
  {
    id: 'compare_co_itinerary_v1',
    type: 'compare',
    providers: ['claude', 'openai'],
    title: "Kyoto Itinerary (Claude vs OpenAI)",
    data: recording_compare_co_itinerary_v1 as unknown as (DemoCompare),
  },
  {
    id: 'compare_co_sql_v1',
    type: 'compare',
    providers: ['claude', 'openai'],
    title: "Explain SQL CTE (Claude vs OpenAI)",
    data: recording_compare_co_sql_v1 as unknown as (DemoCompare),
  },
  {
    id: 'compare_og_itinerary_v1',
    type: 'compare',
    providers: ['openai', 'google'],
    title: "Kyoto Itinerary (OpenAI vs Gemini)",
    data: recording_compare_og_itinerary_v1 as unknown as (DemoCompare),
  },
  {
    id: 'compare_og_sql_v1',
    type: 'compare',
    providers: ['openai', 'google'],
    title: "Explain SQL CTE (OpenAI vs Gemini)",
    data: recording_compare_og_sql_v1 as unknown as (DemoCompare),
  },
  {
    id: 'debate_cg_default_1',
    type: 'debate',
    providers: ['claude', 'google'],
    title: "Motion: Humanity has a moral imperative to colonize Mars. (Default)",
    topic: "Motion: Humanity has a moral imperative to colonize Mars.",
    data: recording_debate_cg_default_1 as unknown as (DemoDebate),
  },
  {
    id: 'debate_cg_george_1',
    type: 'debate',
    providers: ['claude', 'google'],
    title: "Motion: A hot dog is a sandwich. (George persona)",
    topic: "Motion: A hot dog is a sandwich.",
    data: recording_debate_cg_george_1 as unknown as (DemoDebate),
  },
  {
    id: 'debate_cg_sage_1',
    type: 'debate',
    providers: ['claude', 'google'],
    title: "Motion: We should ban animal testing. (Sage persona)",
    topic: "Motion: We should ban animal testing.",
    data: recording_debate_cg_sage_1 as unknown as (DemoDebate),
  },
  {
    id: 'debate_co_default_1',
    type: 'debate',
    providers: ['claude', 'openai'],
    title: "Motion: Homework should be abolished. (Default)",
    topic: "Motion: Homework should be abolished.",
    data: recording_debate_co_default_1 as unknown as (DemoDebate),
  },
  {
    id: 'debate_co_george_1',
    type: 'debate',
    providers: ['claude', 'openai'],
    title: "Motion: Social media should be regulated. (George persona)",
    topic: "Motion: Social media should be regulated.",
    data: recording_debate_co_george_1 as unknown as (DemoDebate),
  },
  {
    id: 'debate_co_sage_1',
    type: 'debate',
    providers: ['claude', 'openai'],
    title: "Motion: Money can buy happiness. (Sage persona)",
    topic: "Motion: Money can buy happiness.",
    data: recording_debate_co_sage_1 as unknown as (DemoDebate),
  },
  {
    id: 'debate_og_default_1',
    type: 'debate',
    providers: ['openai', 'google'],
    title: "Motion: the Fairness Doctrine should be reinstated. (Default)",
    topic: "Motion: the Fairness Doctrine should be reinstated.",
    data: recording_debate_og_default_1 as unknown as (DemoDebate),
  },
  {
    id: 'debate_og_george_1',
    type: 'debate',
    providers: ['openai', 'google'],
    title: "Motion: Video Games are art. (George persona)",
    topic: "Motion: Video Games are art.",
    data: recording_debate_og_george_1 as unknown as (DemoDebate),
  },
  {
    id: 'debate_og_sage_1',
    type: 'debate',
    providers: ['openai', 'google'],
    title: "Motion: There should be a universal basic income. (Sage persona)",
    topic: "Motion: There should be a universal basic income.",
    data: recording_debate_og_sage_1 as unknown as (DemoDebate),
  }
];

export const recordingsById = new Map(demoRecordings.map((entry) => [entry.id, entry]));

export function getRecordingsByProviders<T extends DemoChat | DemoCompare | DemoDebate>(
  type: DemoRecordingType,
  providers: string[]
): DemoRecordingEntry<T>[] {
  const normalized = comboKey(providers);
  return demoRecordings.filter((entry) => entry.type === type && comboKey(entry.providers) === normalized) as DemoRecordingEntry<T>[];
}

export function comboKey(providers: string[]): string {
  const allowed = ['claude', 'openai', 'google'];
  const normalized = Array.from(new Set(providers.map((p) => p.toLowerCase()))).filter((p) => allowed.includes(p));
  normalized.sort((a, b) => allowed.indexOf(a) - allowed.indexOf(b));
  return normalized.join('+');
}
